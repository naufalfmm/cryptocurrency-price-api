// Code generated by MockGen. DO NOT EDIT.
// Source: password.go

// Package mockPassword is a generated GoMock package.
package mockPassword

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPassword is a mock of Password interface.
type MockPassword struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordMockRecorder
}

// MockPasswordMockRecorder is the mock recorder for MockPassword.
type MockPasswordMockRecorder struct {
	mock *MockPassword
}

// NewMockPassword creates a new mock instance.
func NewMockPassword(ctrl *gomock.Controller) *MockPassword {
	mock := &MockPassword{ctrl: ctrl}
	mock.recorder = &MockPasswordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPassword) EXPECT() *MockPasswordMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockPassword) Check(hashed, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", hashed, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockPasswordMockRecorder) Check(hashed, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockPassword)(nil).Check), hashed, password)
}

// Generate mocks base method.
func (m *MockPassword) Generate(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockPasswordMockRecorder) Generate(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockPassword)(nil).Generate), password)
}
