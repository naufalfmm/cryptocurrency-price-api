// Code generated by MockGen. DO NOT EDIT.
// Source: orm.go

// Package mockOrm is a generated GoMock package.
package mockOrm

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	orm "github.com/naufalfmm/cryptocurrency-price-api/utils/orm"
	gorm "gorm.io/gorm"
	clause "gorm.io/gorm/clause"
)

// MockOrm is a mock of Orm interface.
type MockOrm struct {
	ctrl     *gomock.Controller
	recorder *MockOrmMockRecorder
}

// MockOrmMockRecorder is the mock recorder for MockOrm.
type MockOrmMockRecorder struct {
	mock *MockOrm
}

// NewMockOrm creates a new mock instance.
func NewMockOrm(ctrl *gomock.Controller) *MockOrm {
	mock := &MockOrm{ctrl: ctrl}
	mock.recorder = &MockOrmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrm) EXPECT() *MockOrmMockRecorder {
	return m.recorder
}

// AddError mocks base method.
func (m *MockOrm) AddError(err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddError", err)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddError indicates an expected call of AddError.
func (mr *MockOrmMockRecorder) AddError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockOrm)(nil).AddError), err)
}

// Assign mocks base method.
func (m *MockOrm) Assign(attrs ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Assign", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Assign indicates an expected call of Assign.
func (mr *MockOrmMockRecorder) Assign(attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockOrm)(nil).Assign), attrs...)
}

// Association mocks base method.
func (m *MockOrm) Association(column string) orm.Association {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Association", column)
	ret0, _ := ret[0].(orm.Association)
	return ret0
}

// Association indicates an expected call of Association.
func (mr *MockOrmMockRecorder) Association(column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Association", reflect.TypeOf((*MockOrm)(nil).Association), column)
}

// Attrs mocks base method.
func (m *MockOrm) Attrs(attrs ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Attrs", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Attrs indicates an expected call of Attrs.
func (mr *MockOrmMockRecorder) Attrs(attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attrs", reflect.TypeOf((*MockOrm)(nil).Attrs), attrs...)
}

// AutoMigrate mocks base method.
func (m *MockOrm) AutoMigrate(dst ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dst {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoMigrate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate.
func (mr *MockOrmMockRecorder) AutoMigrate(dst ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockOrm)(nil).AutoMigrate), dst...)
}

// Begin mocks base method.
func (m *MockOrm) Begin(opts ...*sql.TxOptions) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Begin", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockOrmMockRecorder) Begin(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockOrm)(nil).Begin), opts...)
}

// Clauses mocks base method.
func (m *MockOrm) Clauses(conds ...clause.Expression) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Clauses", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Clauses indicates an expected call of Clauses.
func (mr *MockOrmMockRecorder) Clauses(conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clauses", reflect.TypeOf((*MockOrm)(nil).Clauses), conds...)
}

// Clone mocks base method.
func (m *MockOrm) Clone() orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockOrmMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockOrm)(nil).Clone))
}

// Commit mocks base method.
func (m *MockOrm) Commit() orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockOrmMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockOrm)(nil).Commit))
}

// Connection mocks base method.
func (m *MockOrm) Connection(fc func(orm.Orm) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connection", fc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connection indicates an expected call of Connection.
func (mr *MockOrmMockRecorder) Connection(fc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockOrm)(nil).Connection), fc)
}

// Count mocks base method.
func (m *MockOrm) Count(count *int64) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", count)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockOrmMockRecorder) Count(count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockOrm)(nil).Count), count)
}

// Create mocks base method.
func (m *MockOrm) Create(value interface{}) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrmMockRecorder) Create(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrm)(nil).Create), value)
}

// CreateInBatches mocks base method.
func (m *MockOrm) CreateInBatches(value interface{}, batchSize int) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInBatches", value, batchSize)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// CreateInBatches indicates an expected call of CreateInBatches.
func (mr *MockOrmMockRecorder) CreateInBatches(value, batchSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInBatches", reflect.TypeOf((*MockOrm)(nil).CreateInBatches), value, batchSize)
}

// DB mocks base method.
func (m *MockOrm) DB() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DB indicates an expected call of DB.
func (mr *MockOrmMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockOrm)(nil).DB))
}

// Debug mocks base method.
func (m *MockOrm) Debug() orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug")
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockOrmMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockOrm)(nil).Debug))
}

// Delete mocks base method.
func (m *MockOrm) Delete(value interface{}, conds ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{value}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrmMockRecorder) Delete(value interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{value}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrm)(nil).Delete), varargs...)
}

// Distinct mocks base method.
func (m *MockOrm) Distinct(args ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Distinct", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Distinct indicates an expected call of Distinct.
func (mr *MockOrmMockRecorder) Distinct(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distinct", reflect.TypeOf((*MockOrm)(nil).Distinct), args...)
}

// Error mocks base method.
func (m *MockOrm) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockOrmMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockOrm)(nil).Error))
}

// Exec mocks base method.
func (m *MockOrm) Exec(sql string, values ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockOrmMockRecorder) Exec(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockOrm)(nil).Exec), varargs...)
}

// Find mocks base method.
func (m *MockOrm) Find(dest interface{}, conds ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockOrmMockRecorder) Find(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockOrm)(nil).Find), varargs...)
}

// FindInBatches mocks base method.
func (m *MockOrm) FindInBatches(dest interface{}, batchSize int, fc func(orm.Orm, int) error) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInBatches", dest, batchSize, fc)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// FindInBatches indicates an expected call of FindInBatches.
func (mr *MockOrmMockRecorder) FindInBatches(dest, batchSize, fc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInBatches", reflect.TypeOf((*MockOrm)(nil).FindInBatches), dest, batchSize, fc)
}

// First mocks base method.
func (m *MockOrm) First(dest interface{}, conds ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockOrmMockRecorder) First(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockOrm)(nil).First), varargs...)
}

// FirstOrCreate mocks base method.
func (m *MockOrm) FirstOrCreate(dest interface{}, conds ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrCreate", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// FirstOrCreate indicates an expected call of FirstOrCreate.
func (mr *MockOrmMockRecorder) FirstOrCreate(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreate", reflect.TypeOf((*MockOrm)(nil).FirstOrCreate), varargs...)
}

// FirstOrInit mocks base method.
func (m *MockOrm) FirstOrInit(dest interface{}, conds ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrInit", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// FirstOrInit indicates an expected call of FirstOrInit.
func (mr *MockOrmMockRecorder) FirstOrInit(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrInit", reflect.TypeOf((*MockOrm)(nil).FirstOrInit), varargs...)
}

// Get mocks base method.
func (m *MockOrm) Get(key string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrmMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrm)(nil).Get), key)
}

// Gorm mocks base method.
func (m *MockOrm) Gorm() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gorm")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Gorm indicates an expected call of Gorm.
func (mr *MockOrmMockRecorder) Gorm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gorm", reflect.TypeOf((*MockOrm)(nil).Gorm))
}

// Group mocks base method.
func (m *MockOrm) Group(name string) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", name)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockOrmMockRecorder) Group(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockOrm)(nil).Group), name)
}

// Having mocks base method.
func (m *MockOrm) Having(query interface{}, args ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Having", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Having indicates an expected call of Having.
func (mr *MockOrmMockRecorder) Having(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Having", reflect.TypeOf((*MockOrm)(nil).Having), varargs...)
}

// InnerJoins mocks base method.
func (m *MockOrm) InnerJoins(query string, args ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InnerJoins", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// InnerJoins indicates an expected call of InnerJoins.
func (mr *MockOrmMockRecorder) InnerJoins(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerJoins", reflect.TypeOf((*MockOrm)(nil).InnerJoins), varargs...)
}

// InstanceGet mocks base method.
func (m *MockOrm) InstanceGet(key string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceGet", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// InstanceGet indicates an expected call of InstanceGet.
func (mr *MockOrmMockRecorder) InstanceGet(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceGet", reflect.TypeOf((*MockOrm)(nil).InstanceGet), key)
}

// InstanceSet mocks base method.
func (m *MockOrm) InstanceSet(key string, value interface{}) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceSet", key, value)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// InstanceSet indicates an expected call of InstanceSet.
func (mr *MockOrmMockRecorder) InstanceSet(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceSet", reflect.TypeOf((*MockOrm)(nil).InstanceSet), key, value)
}

// Joins mocks base method.
func (m *MockOrm) Joins(query string, args ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Joins", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Joins indicates an expected call of Joins.
func (mr *MockOrmMockRecorder) Joins(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joins", reflect.TypeOf((*MockOrm)(nil).Joins), varargs...)
}

// Last mocks base method.
func (m *MockOrm) Last(dest interface{}, conds ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Last indicates an expected call of Last.
func (mr *MockOrmMockRecorder) Last(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockOrm)(nil).Last), varargs...)
}

// Limit mocks base method.
func (m *MockOrm) Limit(limit int) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", limit)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockOrmMockRecorder) Limit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockOrm)(nil).Limit), limit)
}

// Migrator mocks base method.
func (m *MockOrm) Migrator() gorm.Migrator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrator")
	ret0, _ := ret[0].(gorm.Migrator)
	return ret0
}

// Migrator indicates an expected call of Migrator.
func (mr *MockOrmMockRecorder) Migrator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrator", reflect.TypeOf((*MockOrm)(nil).Migrator))
}

// Model mocks base method.
func (m *MockOrm) Model(value interface{}) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", value)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockOrmMockRecorder) Model(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockOrm)(nil).Model), value)
}

// Not mocks base method.
func (m *MockOrm) Not(query interface{}, args ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Not", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Not indicates an expected call of Not.
func (mr *MockOrmMockRecorder) Not(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Not", reflect.TypeOf((*MockOrm)(nil).Not), varargs...)
}

// Offset mocks base method.
func (m *MockOrm) Offset(offset int) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", offset)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockOrmMockRecorder) Offset(offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockOrm)(nil).Offset), offset)
}

// Omit mocks base method.
func (m *MockOrm) Omit(columns ...string) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Omit", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Omit indicates an expected call of Omit.
func (mr *MockOrmMockRecorder) Omit(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Omit", reflect.TypeOf((*MockOrm)(nil).Omit), columns...)
}

// Or mocks base method.
func (m *MockOrm) Or(query interface{}, args ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Or", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Or indicates an expected call of Or.
func (mr *MockOrmMockRecorder) Or(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Or", reflect.TypeOf((*MockOrm)(nil).Or), varargs...)
}

// Order mocks base method.
func (m *MockOrm) Order(value interface{}) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", value)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockOrmMockRecorder) Order(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockOrm)(nil).Order), value)
}

// Ping mocks base method.
func (m *MockOrm) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockOrmMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockOrm)(nil).Ping))
}

// Pluck mocks base method.
func (m *MockOrm) Pluck(column string, dest interface{}) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pluck", column, dest)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Pluck indicates an expected call of Pluck.
func (mr *MockOrmMockRecorder) Pluck(column, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pluck", reflect.TypeOf((*MockOrm)(nil).Pluck), column, dest)
}

// Preload mocks base method.
func (m *MockOrm) Preload(query string, args ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Preload", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Preload indicates an expected call of Preload.
func (mr *MockOrmMockRecorder) Preload(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preload", reflect.TypeOf((*MockOrm)(nil).Preload), varargs...)
}

// Raw mocks base method.
func (m *MockOrm) Raw(sql string, values ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Raw", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockOrmMockRecorder) Raw(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockOrm)(nil).Raw), varargs...)
}

// Rollback mocks base method.
func (m *MockOrm) Rollback() orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockOrmMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockOrm)(nil).Rollback))
}

// RollbackTo mocks base method.
func (m *MockOrm) RollbackTo(name string) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTo", name)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// RollbackTo indicates an expected call of RollbackTo.
func (mr *MockOrmMockRecorder) RollbackTo(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTo", reflect.TypeOf((*MockOrm)(nil).RollbackTo), name)
}

// Row mocks base method.
func (m *MockOrm) Row() *sql.Row {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Row")
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// Row indicates an expected call of Row.
func (mr *MockOrmMockRecorder) Row() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Row", reflect.TypeOf((*MockOrm)(nil).Row))
}

// Rows mocks base method.
func (m *MockOrm) Rows() (*sql.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rows")
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rows indicates an expected call of Rows.
func (mr *MockOrmMockRecorder) Rows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rows", reflect.TypeOf((*MockOrm)(nil).Rows))
}

// Save mocks base method.
func (m *MockOrm) Save(value interface{}) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", value)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockOrmMockRecorder) Save(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockOrm)(nil).Save), value)
}

// SavePoint mocks base method.
func (m *MockOrm) SavePoint(name string) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePoint", name)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// SavePoint indicates an expected call of SavePoint.
func (mr *MockOrmMockRecorder) SavePoint(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePoint", reflect.TypeOf((*MockOrm)(nil).SavePoint), name)
}

// Scan mocks base method.
func (m *MockOrm) Scan(dest interface{}) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", dest)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockOrmMockRecorder) Scan(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockOrm)(nil).Scan), dest)
}

// ScanRows mocks base method.
func (m *MockOrm) ScanRows(rows *sql.Rows, dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanRows", rows, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanRows indicates an expected call of ScanRows.
func (mr *MockOrmMockRecorder) ScanRows(rows, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanRows", reflect.TypeOf((*MockOrm)(nil).ScanRows), rows, dest)
}

// Scopes mocks base method.
func (m *MockOrm) Scopes(funcs ...func(orm.Orm) orm.Orm) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range funcs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scopes", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Scopes indicates an expected call of Scopes.
func (mr *MockOrmMockRecorder) Scopes(funcs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scopes", reflect.TypeOf((*MockOrm)(nil).Scopes), funcs...)
}

// Select mocks base method.
func (m *MockOrm) Select(query interface{}, args ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockOrmMockRecorder) Select(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockOrm)(nil).Select), varargs...)
}

// Session mocks base method.
func (m *MockOrm) Session(config *gorm.Session) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", config)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockOrmMockRecorder) Session(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockOrm)(nil).Session), config)
}

// Set mocks base method.
func (m *MockOrm) Set(key string, value interface{}) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockOrmMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockOrm)(nil).Set), key, value)
}

// SetupJoinTable mocks base method.
func (m *MockOrm) SetupJoinTable(model interface{}, field string, joinTable interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupJoinTable", model, field, joinTable)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupJoinTable indicates an expected call of SetupJoinTable.
func (mr *MockOrmMockRecorder) SetupJoinTable(model, field, joinTable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupJoinTable", reflect.TypeOf((*MockOrm)(nil).SetupJoinTable), model, field, joinTable)
}

// Table mocks base method.
func (m *MockOrm) Table(name string, args ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Table", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockOrmMockRecorder) Table(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockOrm)(nil).Table), varargs...)
}

// Take mocks base method.
func (m *MockOrm) Take(dest interface{}, conds ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Take", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Take indicates an expected call of Take.
func (mr *MockOrmMockRecorder) Take(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockOrm)(nil).Take), varargs...)
}

// ToSQL mocks base method.
func (m *MockOrm) ToSQL(queryFn func(orm.Orm) orm.Orm) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSQL", queryFn)
	ret0, _ := ret[0].(string)
	return ret0
}

// ToSQL indicates an expected call of ToSQL.
func (mr *MockOrmMockRecorder) ToSQL(queryFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSQL", reflect.TypeOf((*MockOrm)(nil).ToSQL), queryFn)
}

// Transaction mocks base method.
func (m *MockOrm) Transaction(fc func(orm.Orm) error, opts ...*sql.TxOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{fc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockOrmMockRecorder) Transaction(fc interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{fc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockOrm)(nil).Transaction), varargs...)
}

// Unscoped mocks base method.
func (m *MockOrm) Unscoped() orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unscoped")
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Unscoped indicates an expected call of Unscoped.
func (mr *MockOrmMockRecorder) Unscoped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unscoped", reflect.TypeOf((*MockOrm)(nil).Unscoped))
}

// Update mocks base method.
func (m *MockOrm) Update(column string, value interface{}) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", column, value)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrmMockRecorder) Update(column, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrm)(nil).Update), column, value)
}

// UpdateColumn mocks base method.
func (m *MockOrm) UpdateColumn(column string, value interface{}) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumn", column, value)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// UpdateColumn indicates an expected call of UpdateColumn.
func (mr *MockOrmMockRecorder) UpdateColumn(column, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumn", reflect.TypeOf((*MockOrm)(nil).UpdateColumn), column, value)
}

// UpdateColumns mocks base method.
func (m *MockOrm) UpdateColumns(values interface{}) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumns", values)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// UpdateColumns indicates an expected call of UpdateColumns.
func (mr *MockOrmMockRecorder) UpdateColumns(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumns", reflect.TypeOf((*MockOrm)(nil).UpdateColumns), values)
}

// Updates mocks base method.
func (m *MockOrm) Updates(values interface{}) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", values)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Updates indicates an expected call of Updates.
func (mr *MockOrmMockRecorder) Updates(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockOrm)(nil).Updates), values)
}

// Use mocks base method.
func (m *MockOrm) Use(plugin gorm.Plugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use", plugin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Use indicates an expected call of Use.
func (mr *MockOrmMockRecorder) Use(plugin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockOrm)(nil).Use), plugin)
}

// Where mocks base method.
func (m *MockOrm) Where(query interface{}, args ...interface{}) orm.Orm {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockOrmMockRecorder) Where(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockOrm)(nil).Where), varargs...)
}

// WithContext mocks base method.
func (m *MockOrm) WithContext(ctx context.Context) orm.Orm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(orm.Orm)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockOrmMockRecorder) WithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockOrm)(nil).WithContext), ctx)
}
